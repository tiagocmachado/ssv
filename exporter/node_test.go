package exporter

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"github.com/attestantio/go-eth2-client/api/v1"
	spec "github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/bloxapp/ssv/beacon"
	"github.com/bloxapp/ssv/eth1"
	"github.com/bloxapp/ssv/exporter/api"
	"github.com/bloxapp/ssv/storage"
	"github.com/bloxapp/ssv/storage/basedb"
	"github.com/bloxapp/ssv/utils/logex"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/herumi/bls-eth-go-binary/bls"
	"github.com/prysmaticlabs/prysm/async/event"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"strings"
	"sync"
	"testing"
)

func init() {
	bls.Init(bls.BLS12_381)
	logex.Build("test", zapcore.DebugLevel, nil)
}

func TestExporter_handleQueryRequests(t *testing.T) {
	exp, err := newMockExporter()
	require.NoError(t, err)

	netMsg := api.NetworkMessage{
		Msg: api.Message{
			Type:   api.TypeValidator,
			Filter: api.MessageFilter{From: 0},
		},
		Err:  nil,
		Conn: nil,
	}
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeValidator, netMsg.Msg.Type)

	netMsg.Msg.Type = api.TypeOperator
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeOperator, netMsg.Msg.Type)

	netMsg.Msg.Type = "foo"
	exp.handleQueryRequests(&netMsg)
	require.Equal(t, api.TypeError, netMsg.Msg.Type)
}

func TestExporter_ListenToEth1Events(t *testing.T) {
	exp, err := newMockExporter()
	require.NoError(t, err)

	feed := new(event.Feed)

	go func() {
		errCn := exp.listenToEth1Events(feed)
		for err := range errCn {
			require.NoError(t, err)
		}
	}()

	var wg sync.WaitGroup
	go func() {
		cnOut := make(chan api.Message)
		sub := exp.ws.BroadcastFeed().Subscribe(cnOut)
		defer sub.Unsubscribe()

		for msg := range cnOut {
			raw, err := json.Marshal(msg)
			require.NoError(t, err)
			if msg.Type == api.TypeValidator {
				var validators api.ValidatorsMessage
				err = json.Unmarshal(raw, &validators)
				require.NoError(t, err)
				require.Equal(t, len(validators.Data), 1)
				require.Equal(t, "91db3a13ab428a6c9c20e7104488cb6961abeab60e56cf4ba199"+
					"eed3b5f6e7ced670ecb066c9704dc2fa93133792381c",
					validators.Data[0].PublicKey)
				wg.Done()
			} else if msg.Type == api.TypeOperator {
				var operators api.OperatorsMessage
				err = json.Unmarshal(raw, &operators)
				require.NoError(t, err)
				require.Equal(t, len(operators.Data), 1)
				require.Equal(t, "asdas", operators.Data[0].Name)
				wg.Done()
			}
		}
	}()
	// pushing 2 events and waits for handling
	wg.Add(1)
	feed.Send(validatorAddedMockEvent(t))

	wg.Add(1)
	feed.Send(operatorAddedMockEvent(t))

	wg.Wait()

	validators, err := exp.storage.ListValidators(0, 0)
	require.NoError(t, err)
	require.Equal(t, len(validators), 1)

	operators, err := exp.storage.ListOperators(0, 0)
	require.NoError(t, err)
	require.Equal(t, len(operators), 1)
}

func newMockExporter() (*exporter, error) {
	logger := zap.L()
	db, err := storage.GetStorageFactory(basedb.Options{
		Type:   "badger-memory",
		Logger: logger,
		Path:   "",
	})
	if err != nil {
		return nil, err
	}

	ws := api.NewWsServer(context.Background(), logger, nil, nil)

	opts := Options{
		Ctx:        context.Background(),
		Beacon:     beacon.NewMockBeacon(map[uint64][]*beacon.Duty{}, map[spec.BLSPubKey]*v1.Validator{}),
		Logger:     logger,
		ETHNetwork: nil,
		Eth1Client: nil,
		Network:    nil,
		DB:         db,
		WS:         ws,
		WsAPIPort:  0,
	}
	e := New(opts)
	ws.UseQueryHandler(e.(*exporter).handleQueryRequests)

	return e.(*exporter), nil
}

func TestToValidatorInformation(t *testing.T) {
	e := validatorAddedMockEvent(t)
	vae, ok := e.Data.(eth1.ValidatorAddedEvent)
	require.True(t, ok)

	vi, err := toValidatorInformation(vae)
	require.NoError(t, err)
	require.NotNil(t, vi)
	require.True(t, strings.EqualFold(hex.EncodeToString(vae.PublicKey), vi.PublicKey))
}

func validatorAddedMockEvent(t *testing.T) *eth1.Event {
	rawValidatorAdded := `{
"address": "0x9573c41f0ed8b72f3bd6a9ba6e3e15426a0aa65b",
"topics": [
	"0x8674c0b4bd63a0814bf1ae6d64d71cf4886880a8bdbd3d7c1eca89a37d1e9271"
],
"data": "",
"blockNumber": "0x4a3a2e",
"transactionHash": "0x20b673d0be280a38daa4f636ec6ad1108c0635dcb35c603f8e401a4120a2b506",
"transactionIndex": "0x3",
"blockHash": "0x579a98700bc9f9b1dc6ea3d00f9fd43bf28bd795f615210fd138fe724b8654d4",
"logIndex": "0x2",
"removed": false
}`
	var vLogValidatorAdded types.Log
	err := json.Unmarshal([]byte(rawValidatorAdded), &vLogValidatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(eth1.ContractABI()))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)
	parsed, _, err := eth1.ParseValidatorAddedEvent(zap.L(), nil, vLogValidatorAdded.Data, contractAbi)
	require.NoError(t, err)

	return &eth1.Event{Log: types.Log{}, Data: *parsed}
}

func operatorAddedMockEvent(t *testing.T) *eth1.Event {
	rawOperatorAdded := `{
  "address": "0x9573c41f0ed8b72f3bd6a9ba6e3e15426a0aa65b",
  "topics": [
	"0x39b34f12d0a1eb39d220d2acd5e293c894753a36ac66da43b832c9f1fdb8254e"
  ],
  "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000067ce5c69260bd819b4e0ad13f4b873074d47981100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005617364617300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002644c5330744c5331435255644a54694253553045675546564354456c4449457446575330744c533074436b314a53554a4a616b464f516d64726357687261556335647a424351564646526b464254304e425554684254556c4a516b4e6e53304e4255555642623364464e303946596e643554477432636c6f7756465530616d6f4b6232393553555a34546e5a6e636c6b34526d6f7256334e736556705562486c714f4656455a6b5a7957576731565734796454525a545752425a53746a5547597857457372515339514f5668594e3039434e47356d4d51705062306457516a5a33636b4d76616d684d596e5a50534459314d484a3556566c766347565a6147785457486848626b5130646d4e3256485a6a6355784d516974315a54497661586c546546464d634670534c7a5a57436e4e554d325a47636b5676626e704756484675526b4e33513059794f476c51626b7057516d70594e6c517653474e55536a553153555272596e52766447467956545a6a6433644f543068755347743656334a324e326b4b64486c5161314930523255784d576874566b633555577053543351314e6d566f57475a4763305a764e55317855335a7863466c776246687253533936565535744f476f76624846465a465577556c6856636a517854416f7961486c4c57533977566d707a5a32316c56484e4f4e79396163554644613068355a546c47596d74574f565976566d4a556144646f56315a4d5648464855326733516c6b765244646e643039335a6e564c61584579436c52335355524255554643436930744c5330745255354549464a545153425156554a4d53554d675330565a4c5330414c53304b00000000000000000000000000000000000000000000000000000000",
  "blockNumber": "0x49f59c",
  "transactionHash": "0x097d9a621ace2ca0c78d115d833edc1901bfe75f107a7b3f427663ea308c12ca",
  "transactionIndex": "0xf",
  "blockHash": "0x9542ecebe9d541e2575cb5577dfd4b73c9b0c3ab634fcac4ce0ff319249c90e4",
  "logIndex": "0xf",
  "removed": false
}`
	var vLogOperatorAdded types.Log
	err := json.Unmarshal([]byte(rawOperatorAdded), &vLogOperatorAdded)
	require.NoError(t, err)
	contractAbi, err := abi.JSON(strings.NewReader(eth1.ContractABI()))
	require.NoError(t, err)
	require.NotNil(t, contractAbi)
	parsed, _, err := eth1.ParseOperatorAddedEvent(zap.L(), nil, vLogOperatorAdded.Data, contractAbi)
	require.NoError(t, err)

	return &eth1.Event{Log: types.Log{}, Data: *parsed}
}
